@use 'sass:map';

//문자 스타일 관련 함수, 믹스인
@use 'type-semantic';

// 색상 관련 변수, 함수, 믹스인
@use 'theme';

// 색상 외 모든 스타일관련 함수, 믹스인
@use 'style';

// 크기관련 변수
@use 'dimension';

body {
  color: theme.get-val('on-surface');
  background-color: theme.get-val('surface');

  @include type-semantic.body-sm;
}

#root {
  position: relative;
  min-width: 20rem;
  height: 100dvh;
  overflow-x: hidden;
  overflow-y: scroll;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  text-wrap: balance;
  word-break: keep-all;
  overflow-wrap: break-word;
}

h1 {
  @include type-semantic.title-xxl;
}

h2 {
  @include type-semantic.title-xl;
}

h3 {
  @include type-semantic.title-lg;
}

h4 {
  @include type-semantic.title;
}

h5 {
  @include type-semantic.subtitle;
}

h6 {
  @include type-semantic.subtitle-sm;
}

.material-symbols-outlined {
  font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
}

.container {
  $px: map.get(dimension.$px, 'sm');
  $py: map.get(dimension.$py, 'sm');

  width: min(dimension.$static-w-max, calc(100% - 2 * $px));
  padding-block: $py;
  margin-inline: auto;

  &--width {
    &-expand {
      width: min(
        dimension.$static-w-variant-max,
        calc(100% - 2 * map.get(dimension.$px-variant, 'sm'))
      );
    }
  }
}

@media (width > map.get(dimension.$bp-gt, 'md')) {
  $px: map.get(dimension.$px, 'md');
  $py: map.get(dimension.$py, 'md');
  $gap-x: map.get(dimension.$gap-x, 'md');
  $gap-y: map.get(dimension.$gap-y, 'md');

  .container {
    width: min(dimension.$static-w-max, calc(100% - 2 * $px));
    padding-block: $py;

    &--width {
      &-expand {
        width: min(
          dimension.$static-w-variant-max,
          calc(100% - 2 * map.get(dimension.$px-variant, 'md'))
        );
      }
    }
  }
}

@media (width > map.get(dimension.$bp-gt, 'lg')) {
  $px: map.get(dimension.$px, 'lg');
  $py: map.get(dimension.$py, 'lg');
  $gap-x: map.get(dimension.$gap-x, 'lg');
  $gap-y: map.get(dimension.$gap-y, 'lg');

  .container {
    width: min(dimension.$static-w-max, calc(100% - 2 * $px));
    padding-block: $py;

    &--width {
      &-expand {
        width: min(
          dimension.$static-w-variant-max,
          calc(100% - 2 * map.get(dimension.$px-variant, 'lg'))
        );
      }
    }
  }
}

@media (width > map.get(dimension.$bp-gt, 'xl')) {
  $px: map.get(dimension.$px, 'xl');
  $py: map.get(dimension.$py, 'xl');
  $gap-x: map.get(dimension.$gap-x, 'xl');
  $gap-y: map.get(dimension.$gap-y, 'xl');

  .container {
    width: min(dimension.$static-w-max, calc(100% - 2 * $px));
    padding-block: $py;

    &--width {
      &-expand {
        width: min(
          dimension.$static-w-variant-max,
          calc(100% - 2 * map.get(dimension.$px-variant, 'xl'))
        );
      }
    }
  }
}

@media (width > map.get(dimension.$bp-gt, 'xxl')) {
  $px: map.get(dimension.$px, 'xxl');
  $py: map.get(dimension.$py, 'xxl');
  $gap-x: map.get(dimension.$gap-x, 'xxl');
  $gap-y: map.get(dimension.$gap-y, 'xxl');

  .container {
    width: min(dimension.$static-w-max, calc(100% - 2 * $px));
    padding-block: $py;

    &--width {
      &-expand {
        width: min(
          dimension.$static-w-variant-max,
          calc(100% - 2 * map.get(dimension.$px-variant, 'xxl'))
        );
      }
    }
  }
}
